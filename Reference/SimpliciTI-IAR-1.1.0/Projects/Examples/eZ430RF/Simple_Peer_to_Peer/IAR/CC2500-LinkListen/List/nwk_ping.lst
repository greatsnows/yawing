###############################################################################
#                                                                             #
#                                                       13/May/2009  06:55:13 #
# IAR C/C++ Compiler V4.20.1.20017/W32, Evaluation edition for MSP430         #
# Copyright 1996-2008 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Components\si #
#                     mpliciti\nwk_applications\nwk_ping.c                    #
#    Command line  =  -f "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\ #
#                     Examples\eZ430RF\Simple_Peer_to_Peer\IAR\Configuration\ #
#                     End_Device\smpl_config.dat" (-DNUM_CONNECTIONS=2        #
#                     -DSIZE_INFRAME_Q=2 -DSIZE_OUTFRAME_Q=2                  #
#                     "-DTHIS_DEVICE_ADDRESS={0x79, 0x56, 0x34, 0x12}"        #
#                     -DEND_DEVICE) -f "C:\Texas                              #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\Configuration\smpl_nwk_conf #
#                     ig.dat" (-DMAX_HOPS=3 -DMAX_HOPS_FROM_AP=1              #
#                     -DMAX_NWK_PAYLOAD=9 -DMAX_APP_PAYLOAD=10                #
#                     -DDEFAULT_LINK_TOKEN=0x01020304                         #
#                     -DDEFAULT_JOIN_TOKEN=0x05060708 -DxFREQUENCY_AGILITY    #
#                     -DxAPP_AUTO_ACK -DxEXTENDED_API -DxSMPL_SECURE          #
#                     -DxNVOBJECT_SUPPORT -DSW_TIMER) "C:\Texas               #
#                     Instruments\SimpliciTI-IAR-1.1.0\Components\simpliciti\ #
#                     nwk_applications\nwk_ping.c" -D MRFI_CC2500 -lcN        #
#                     "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exa #
#                     mples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen #
#                     \List\" -o "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\P #
#                     rojects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500 #
#                     -LinkListen\Obj\" --require_prototypes --debug          #
#                     -D__MSP430F2274__ -e --double=32 -I "C:\Texas           #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\b #
#                     sp\" -I "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Proj #
#                     ects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\..\ #
#                     ..\..\Components\bsp\drivers\" -I "C:\Texas             #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\b #
#                     sp\boards\EZ430RF\" -I "C:\Texas                        #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\m #
#                     rfi\" -I "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Pro #
#                     jects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\.. #
#                     \..\..\Components\SimpliciTI\nwk\" -I "C:\Texas         #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\S #
#                     impliciTI\nwk_applications\" -I "C:\Program Files\IAR   #
#                     Systems\Embedded Workbench 5.3 Evaluation\430\INC\" -I  #
#                     "C:\Program Files\IAR Systems\Embedded Workbench 5.3    #
#                     Evaluation\430\INC\CLIB\" -Ohz                          #
#    List file     =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exam #
#                     ples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen\ #
#                     List\nwk_ping.lst                                       #
#    Object file   =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exam #
#                     ples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen\ #
#                     Obj\nwk_ping.r43                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Components\simpliciti\nwk_applications\nwk_ping.c
      1          /**************************************************************************************************
      2            Filename:       nwk_ping.c
      3            Revised:        $Date: 2009-01-18 16:01:08 -0800 (Sun, 18 Jan 2009) $
      4            Revision:       $Revision: 18796 $
      5            Author:         $Author: lfriedman $
      6          
      7            Description:    This file supports the SimpliciTI Ping network application.
      8          
      9            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     12            the terms of a software license agreement between the user who downloaded the software,
     13            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     14            "License"). You may not use this Software unless you agree to abide by the terms of the
     15            License. The License limits your use, and you acknowledge, that the Software may not be
     16            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     18            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     19            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     20            perform, display or sell this Software and/or its documentation for any purpose.
     21          
     22            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
     23            WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     24            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     25            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     26            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     27            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     28            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     29            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     30            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     31          
     32            Should you have any questions regarding your right to use this Software,
     33            contact Texas Instruments Incorporated at www.TI.com.
     34          **************************************************************************************************/
     35          
     36          
     37          /******************************************************************************
     38           * INCLUDES
     39           */
     40          #include <string.h>
     41          #include "bsp.h"
     42          #include "mrfi.h"
     43          #include "nwk_types.h"
     44          #include "nwk_frame.h"
     45          #include "nwk.h"
     46          #include "nwk_ping.h"
     47          #include "nwk_globals.h"
     48          #include "nwk_api.h"
     49          #include "nwk_freq.h"
     50          #include "nwk_security.h"
     51          
     52          /******************************************************************************
     53           * MACROS
     54           */
     55          
     56          /******************************************************************************
     57           * CONSTANTS AND DEFINES
     58           */
     59          
     60          /******************************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          /******************************************************************************
     65           * LOCAL VARIABLES
     66           */
     67          
     68          static volatile uint8_t sTid = 0;
     69          
     70          /******************************************************************************
     71           * LOCAL FUNCTIONS
     72           */
     73          static void smpl_send_ping_reply(mrfiPacket_t *);
     74          static void handlePingRequest(mrfiPacket_t *);
     75          
     76          /******************************************************************************
     77           * GLOBAL VARIABLES
     78           */
     79          
     80          /******************************************************************************
     81           * GLOBAL FUNCTIONS
     82           */
     83          
     84          /******************************************************************************
     85           * @fn          nwk_pingInit
     86           *
     87           * @brief       Initialize Ping application.
     88           *
     89           * input parameters
     90           *
     91           * output parameters
     92           *
     93           * @return   void
     94           */
     95          void nwk_pingInit(void)
     96          {
     97            sTid = MRFI_RandomByte();
     98          
     99            return;
    100          }
    101          
    102          /******************************************************************************
    103           * @fn          nwk_ping
    104           *
    105           * @brief       Called from the application level to ping a peer. A small
    106           *              payload is sent that includes a tid to detect correct reply.
    107           *              Caller does not supply payload.
    108           *
    109           * input parameters
    110           * @param   lid     - Link ID representing peer to ping
    111           *
    112           * output parameters
    113           *
    114           * @return   SMPL_SUCCESS   valid reply received
    115           *           SMPL_TIMEOUT   no valid reply received
    116           *           SMPL_NO_CHANNEL  no channels returned on a scan
    117           */
    118          smplStatus_t nwk_ping(linkID_t lid)
    119          {
    120            connInfo_t  *pCInfo   = nwk_getConnInfo(lid);
    121            smplStatus_t rc       = SMPL_BAD_PARAM;
    122            uint8_t      done     = 0;
    123            uint8_t      repeatIt = 2;
    124            uint8_t      msg[MAX_PING_APP_FRAME];
    125            uint8_t      radioState = MRFI_GetRadioState();
    126            union
    127            {
    128              ioctlRawSend_t    send;
    129              ioctlRawReceive_t recv;
    130            } ioctl_info;
    131          
    132            if (!pCInfo || (SMPL_LINKID_USER_UUD == lid))
    133            {
    134              /* either link ID bogus or tried to ping the unconnected user datagram link ID. */
    135              return rc;
    136            }
    137          
    138            do
    139            {
    140          #if defined(FREQUENCY_AGILITY) && !defined(ACCESS_POINT)
    141              uint8_t     i, numChan;
    142              freqEntry_t channels[NWK_FREQ_TBL_SIZE];
    143          
    144              if (repeatIt == 2)
    145              {
    146                /* If FA enabled, first time through set up so that the 'for'
    147                 * loop checks the current channel. This saves time (no scan)
    148                 * and is very likely to succeed. Populate the proper strucure.
    149                 */
    150                SMPL_Ioctl(IOCTL_OBJ_FREQ, IOCTL_ACT_GET, channels);
    151                numChan = 1;
    152              }
    153              else
    154              {
    155                /* If we get here we must scan for the channel we're now on */
    156                if (!(numChan=nwk_scanForChannels(channels)))
    157                {
    158                  return SMPL_NO_CHANNEL;
    159                }
    160              }
    161              /* Either we scan next time through or we're done */
    162              repeatIt--;
    163          
    164              /* this loop Pings on each channel (probably only 1) looking
    165               * for peer.
    166               */
    167              for (i=0; i<numChan && !done; ++i)
    168              {
    169                nwk_setChannel(&channels[i]);
    170          #else
    171              {
    172                repeatIt = 0;
    173          #endif  /* defined(FREQUENCY_AGILITY) && !defined(ACCESS_POINT) */
    174          
    175                ioctl_info.send.addr = (addr_t *)pCInfo->peerAddr;
    176                ioctl_info.send.msg  = msg;
    177                ioctl_info.send.len  = sizeof(msg);
    178                ioctl_info.send.port = SMPL_PORT_PING;
    179          
    180                /* fill in msg */
    181                msg[PB_REQ_OS] = PING_REQ_PING;
    182                msg[PB_TID_OS] = sTid;
    183          
    184                SMPL_Ioctl(IOCTL_OBJ_RAW_IO, IOCTL_ACT_WRITE, &ioctl_info.send);
    185          
    186                ioctl_info.recv.port = SMPL_PORT_PING;
    187                ioctl_info.recv.msg  = msg;
    188                ioctl_info.recv.addr = 0;
    189          
    190                NWK_CHECK_FOR_SETRX(radioState);
    191                NWK_REPLY_DELAY();
    192                NWK_CHECK_FOR_RESTORE_STATE(radioState);
    193          
    194                if (SMPL_SUCCESS == SMPL_Ioctl(IOCTL_OBJ_RAW_IO, IOCTL_ACT_READ, &ioctl_info.recv))
    195                {
    196                  repeatIt = 0;
    197                  done     = 1;
    198                  sTid++;   /* guard against duplicates */
    199                }
    200              }
    201            } while (repeatIt);
    202          
    203            return done ? SMPL_SUCCESS : SMPL_TIMEOUT;
    204          
    205          }
    206          
    207          /******************************************************************************
    208           * @fn          smpl_send_ping_reply
    209           *
    210           * @brief       Send a reply to a ping request.
    211           *
    212           * input parameters
    213           * @param   frame     - pointer to frame containing request
    214           *
    215           * output parameters
    216           *
    217           * @return   void
    218           */
    219          static void smpl_send_ping_reply(mrfiPacket_t *frame)
    220          {
    221            frameInfo_t *pOutFrame;
    222          
    223            /* Build the reply frame. The application payload is the one included in the
    224             * received frame payload.
    225             */
    226            if (pOutFrame = nwk_buildFrame(SMPL_PORT_PING, MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS, MRFI_GET_PAYLOAD_LEN(frame)-F_APP_PAYLOAD_OS, MAX_HOPS))
    227            {
    228              /* destination address is the source adddress of the received frame. */
    229              memcpy(MRFI_P_DST_ADDR(&pOutFrame->mrfiPkt), MRFI_P_SRC_ADDR(frame), NET_ADDR_SIZE);
    230          
    231              /* turn on the reply bit in the application payload */
    232              *(MRFI_P_PAYLOAD(&pOutFrame->mrfiPkt)+F_APP_PAYLOAD_OS+PB_REQ_OS) |= NWK_APP_REPLY_BIT;
    233          #ifdef SMPL_SECURE
    234              nwk_setSecureFrame(&pOutFrame->mrfiPkt, MRFI_GET_PAYLOAD_LEN(frame)-F_APP_PAYLOAD_OS, 0);
    235          #endif  /* SMPL_SECURE */
    236              nwk_sendFrame(pOutFrame, MRFI_TX_TYPE_FORCED);
    237            }
    238          }
    239          
    240          /******************************************************************************
    241           * @fn          nwk_processPing
    242           *
    243           * @brief       Ping network application frame handler.
    244           *
    245           * input parameters
    246           * @param   frame   - pointer to frame in question
    247           *
    248           * output parameters
    249           *
    250           * @return    Keep frame for application, release frame, or replay frame.
    251           */
    252          fhStatus_t nwk_processPing(mrfiPacket_t *frame)
    253          {
    254            fhStatus_t   rc;
    255            uint8_t      replyType;
    256          
    257            /* If we sent this then this is the reply. Validate the
    258             * packet for reception by client app. If we didn't send
    259             * it then we are the target. Send the reply.
    260             */
    261            replyType = nwk_isValidReply(frame, sTid, PB_REQ_OS, PB_TID_OS);
    262            if (SMPL_MY_REPLY == replyType)
    263            {
    264              /* It's a match and it's a reply. Validate the received packet by
    265               * returning a 1 so it can be received by the client app.
    266               */
    267              MRFI_PostKillSem();
    268              rc = FHS_KEEP;
    269            }
    270          #if !defined( END_DEVICE )
    271            else if (SMPL_A_REPLY == replyType)
    272            {
    273              /* no match. If I'm not an ED this is a reply that should be passed on. */
    274              rc = FHS_REPLAY;
    275            }
    276          #endif  /* !END_DEVICE */
    277            else
    278            {
    279              /* No, we didn't send it. Send reply assuming it's a Ping intended for us. */
    280              handlePingRequest(frame);
    281          
    282              rc = FHS_RELEASE;
    283            }
    284          
    285            return rc;
    286          }
    287          
    288          /******************************************************************************
    289           * @fn          handlePingRequest
    290           *
    291           * @brief       Dispatches handler for specfic Ping request
    292           *
    293           * input parameters
    294           *
    295           * @param   frame - Ping frame received
    296           *
    297           * output parameters
    298           *
    299           * @return   void
    300           */
    301          static void handlePingRequest(mrfiPacket_t *frame)
    302          {
    303            switch (*(MRFI_P_PAYLOAD(frame)+F_APP_PAYLOAD_OS))
    304            {
    305              case PING_REQ_PING:
    306                smpl_send_ping_reply(frame);
    307                break;
    308          
    309              default:
    310                break;
    311            }
    312          
    313            return;
    314          }

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     nwk_ping                     18
       -> nwk_getConnInfo         18
       -> MRFI_GetRadioState      18
       -> SMPL_Ioctl              18
       -> MRFI_WakeUp             18
       -> MRFI_RxOn               18
       -> MRFI_ReplyDelay         18
       -> MRFI_Sleep              18
       -> MRFI_RxIdle             18
       -> SMPL_Ioctl              18
     nwk_pingInit                  2
       -> MRFI_RandomByte          2
     nwk_processPing               4
       -> nwk_isValidReply         4
       -> MRFI_PostKillSem         4
       -> smpl_send_ping_reply     4
     smpl_send_ping_reply          6
       -> nwk_buildFrame           6
       -> memcpy                   6
       -> nwk_sendFrame            6


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     sTid                    1
     nwk_pingInit           10
     nwk_ping              166
     smpl_send_ping_reply   70
     nwk_processPing        46

 
 292 bytes in segment CODE
   1 byte  in segment DATA16_Z
 
 292 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
