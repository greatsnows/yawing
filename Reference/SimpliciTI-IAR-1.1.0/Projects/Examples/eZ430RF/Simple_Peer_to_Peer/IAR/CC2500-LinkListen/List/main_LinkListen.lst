###############################################################################
#                                                                             #
#                                                       13/May/2009  07:35:37 #
# IAR C/C++ Compiler V4.20.1.20017/W32, Evaluation edition for MSP430         #
# Copyright 1996-2008 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exam #
#                     ples\Applications\main_LinkListen.c                     #
#    Command line  =  -f "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\ #
#                     Examples\eZ430RF\Simple_Peer_to_Peer\IAR\Configuration\ #
#                     End_Device\smpl_config.dat" (-DNUM_CONNECTIONS=2        #
#                     -DSIZE_INFRAME_Q=2 -DSIZE_OUTFRAME_Q=2                  #
#                     "-DTHIS_DEVICE_ADDRESS={0x79, 0x56, 0x34, 0x12}"        #
#                     -DEND_DEVICE) -f "C:\Texas                              #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\Configuration\smpl_nwk_conf #
#                     ig.dat" (-DMAX_HOPS=3 -DMAX_HOPS_FROM_AP=1              #
#                     -DMAX_NWK_PAYLOAD=9 -DMAX_APP_PAYLOAD=10                #
#                     -DDEFAULT_LINK_TOKEN=0x01020304                         #
#                     -DDEFAULT_JOIN_TOKEN=0x05060708 -DxFREQUENCY_AGILITY    #
#                     -DxAPP_AUTO_ACK -DxEXTENDED_API -DxSMPL_SECURE          #
#                     -DxNVOBJECT_SUPPORT -DSW_TIMER) "C:\Texas               #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\Appl #
#                     ications\main_LinkListen.c" -D MRFI_CC2500 -lcN         #
#                     "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exa #
#                     mples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen #
#                     \List\" -o "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\P #
#                     rojects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500 #
#                     -LinkListen\Obj\" --require_prototypes --debug          #
#                     -D__MSP430F2274__ -e --double=32 -I "C:\Texas           #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\b #
#                     sp\" -I "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Proj #
#                     ects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\..\ #
#                     ..\..\Components\bsp\drivers\" -I "C:\Texas             #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\b #
#                     sp\boards\EZ430RF\" -I "C:\Texas                        #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\m #
#                     rfi\" -I "C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Pro #
#                     jects\Examples\eZ430RF\Simple_Peer_to_Peer\IAR\..\..\.. #
#                     \..\..\Components\SimpliciTI\nwk\" -I "C:\Texas         #
#                     Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\eZ43 #
#                     0RF\Simple_Peer_to_Peer\IAR\..\..\..\..\..\Components\S #
#                     impliciTI\nwk_applications\" -I "C:\Program Files\IAR   #
#                     Systems\Embedded Workbench 5.3 Evaluation\430\INC\" -I  #
#                     "C:\Program Files\IAR Systems\Embedded Workbench 5.3    #
#                     Evaluation\430\INC\CLIB\" -Ohz                          #
#    List file     =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exam #
#                     ples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen\ #
#                     List\main_LinkListen.lst                                #
#    Object file   =  C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Exam #
#                     ples\eZ430RF\Simple_Peer_to_Peer\IAR\CC2500-LinkListen\ #
#                     Obj\main_LinkListen.r43                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\SimpliciTI-IAR-1.1.0\Projects\Examples\Applications\main_LinkListen.c
      1          /*----------------------------------------------------------------------------
      2           *  Demo Application for SimpliciTI
      3           *
      4           *  L. Friedman
      5           *  Texas Instruments, Inc.
      6           *----------------------------------------------------------------------------
      7           */
      8          /******************************************************************************************
      9          
     10            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights granted under
     13            the terms of a software license agreement between the user who downloaded the software,
     14            his/her employer (which must be your employer) and Texas Instruments Incorporated (the
     15            "License"). You may not use this Software unless you agree to abide by the terms of the
     16            License. The License limits your use, and you acknowledge, that the Software may not be
     17            modified, copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio frequency
     19            transceiver, which is integrated into your product. Other than for the foregoing purpose,
     20            you may not use, reproduce, copy, prepare derivative works of, modify, distribute,
     21            perform, display or sell this Software and/or its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”
     24            WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY
     25            WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
     26            IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     27            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE
     28            THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY
     29            INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST
     30            DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY
     31            THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     32          
     33            Should you have any questions regarding your right to use this Software,
     34            contact Texas Instruments Incorporated at www.TI.com.
     35          **************************************************************************************************/
     36          
     37          #include "bsp.h"
     38          #include "mrfi.h"
     39          #include "nwk_types.h"
     40          #include "nwk_api.h"
     41          #include "bsp_leds.h"
     42          #include "bsp_buttons.h"
     43          
     44          #include "app_remap_led.h"
     45          
     46          #define LED_GREEN_IS_ON	BSP_LED1_IS_ON
     47          #define LED_RED_IS_ON 	BSP_LED2_IS_ON
     48          #define	GREEN	1
     49          #define	RED		2
     50          #define	BSP_BUTTON		BSP_BUTTON1
     51          
     52          static void linkFrom(void);
     53          
     54          void toggleLED(uint8_t);
     55          
     56          static          uint8_t  sRxTid = 0;
     57          static          linkID_t sLinkID2 = 0;
     58          static volatile uint8_t  sSemaphore = 0;
     59          
     60          /* Rx callback handler */
     61          static uint8_t sRxCallback(linkID_t);
     62          
     63          void main (void)
     64          {
     65            BSP_Init();
     66          
     67            /* If an on-the-fly device address is generated it must be done before the
     68             * call to SMPL_Init(). If the address is set here the ROM value will not
     69             * be used. If SMPL_Init() runs before this IOCTL is used the IOCTL call
     70             * will not take effect. One shot only. The IOCTL call below is conformal.
     71             */
     72          #ifdef I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE
     73            {
     74              addr_t lAddr;
     75          
     76              createRandomAddress(&lAddr);
     77              SMPL_Ioctl(IOCTL_OBJ_ADDR, IOCTL_ACT_SET, &lAddr);
     78            }
     79          #endif /* I_WANT_TO_CHANGE_DEFAULT_ROM_DEVICE_ADDRESS_PSEUDO_CODE */
     80          
     81            /* This call will fail because the join will fail since there is no Access Point
     82             * in this scenario. But we don't care -- just use the default link token later.
     83             * We supply a callback pointer to handle the message returned by the peer.
     84             */
     85            SMPL_Init(sRxCallback);
     86            /* turn on led green, and turn off led red */
     87          	if (!LED_GREEN_IS_ON())
     88          	{
     89          	  toggleLED(GREEN);
     90          	}
     91          	
     92          	if (LED_RED_IS_ON())
     93          	{
     94          	  toggleLED(RED);
     95          	}
     96            /* turn on LEDs. 
     97            if (!BSP_LED2_IS_ON())
     98            {
     99              toggleLED(2);
    100            }
    101            if (!BSP_LED1_IS_ON())
    102            {
    103              toggleLED(1);
    104            }
    105            */
    106          
    107            /* wait for a button press... 
    108            do {
    109              if (BSP_BUTTON1() || BSP_BUTTON2())
    110              {
    111                break;
    112              }
    113            } while (1);
    114            */
    115          
    116            /* never coming back... */
    117            linkFrom();
    118          
    119            /* but in case we do... */
    120            while (1) ;
    121          }
    122          
    123          static void linkFrom()
    124          {
    125            uint8_t     msg[1], tid = 0;
    126          
    127            /* Turn off one LED so we can tell the device is now listening.
    128             * Received messages will toggle the other LED.
    129             */
    130            //toggleLED(1);
    131          
    132             /* listen for link forever... */
    133            while (1)
    134            {
    135              if (SMPL_SUCCESS == SMPL_LinkListen(&sLinkID2))
    136              {
    137                break;
    138              }
    139          	
    140              //toggleLED(RED);
    141              /* Implement fail-to-link policy here. otherwise, listen again. */
    142            }
    143          
    144            /* we're linked. turn off red LED. received messages will toggle the green LED. */
    145            if (LED_RED_IS_ON())
    146            {
    147              toggleLED(RED);
    148            }
    149          
    150             /* turn on LED1 on the peer in response to receiving a frame. */
    151             //*msg = 0x01;
    152          
    153             /* turn on RX. default is RX off. */
    154             SMPL_Ioctl( IOCTL_OBJ_RADIO, IOCTL_ACT_RADIO_RXON, 0);
    155          
    156             while (1)
    157             {
    158               /* Wait for a frame to be received. The Rx handler, which is running in
    159                * ISR thread, will post to this semaphore allowing the application to
    160                * send the reply message in the user thread.
    161                */
    162               if (sSemaphore)
    163               {
    164                 *(msg) = 0x01;
    165                 SMPL_Send(sLinkID2, msg, sizeof(msg));
    166          
    167                 /* Reset semaphore. This is not properly protected and there is a race
    168                  * here. In theory we could miss a message. Good enough for a demo, though.
    169                  */
    170                 sSemaphore = 0;
    171               }
    172             }
    173          }
    174          
    175          void toggleLED(uint8_t which)
    176          {
    177            if (1 == which)
    178            {
    179              BSP_TOGGLE_LED1();
    180            }
    181            else if (2 == which)
    182            {
    183              BSP_TOGGLE_LED2();
    184            }
    185            return;
    186          }
    187          
    188          /* handle received messages */
    189          static uint8_t sRxCallback(linkID_t port)
    190          {
    191            uint8_t msg[2], len, tid;
    192          
    193            /* is the callback for the link ID we want to handle? */
    194            if (port == sLinkID2)
    195            {
    196              /* yes. go get the frame. we know this call will succeed. */
    197               if ((SMPL_SUCCESS == SMPL_Receive(sLinkID2, msg, &len)) && len)
    198               {
    199                 /* Check the application sequence number to detect
    200                  * late or missing frames...
    201                  */
    202                 tid = *(msg);
    203                 if (tid)
    204                 {
    205          		   if (!LED_RED_IS_ON())
    206          		   {
    207          			 toggleLED(RED);
    208          		   }
    209                 }
    210                 else
    211                 {
    212                 	
    213          		if (LED_RED_IS_ON())
    214          		{
    215          		  toggleLED(RED);
    216          		}
    217                 }
    218                 /* Post to the semaphore to let application know so it sends
    219                  * the reply
    220                  */
    221                 sSemaphore = 1;
    222                 /* drop frame. we're done with it. */
    223                 return 1;
    224               }
    225            }
    226            /* keep frame for later handling */
    227            return 0;
    228          }
    229          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     linkFrom                 4
       -> SMPL_LinkListen     4
       -> toggleLED           4
       -> SMPL_Ioctl          4
       -> SMPL_Send           4
     main                     2
       -> BSP_Init            2
       -> SMPL_Init           2
       -> toggleLED           2
       -> toggleLED           2
       -> linkFrom            2
     sRxCallback              6
       -> SMPL_Receive        6
       -> toggleLED           6
     toggleLED                2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     P1OUT             1
     sLinkID2          1
     sSemaphore        1
     main             34
     ?Subroutine0     14
     linkFrom         58
     toggleLED        20
     sRxCallback      72

 
 198 bytes in segment CODE
   1 byte  in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 198 bytes of CODE memory
   2 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: 2
